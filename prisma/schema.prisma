generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  email             String       @unique
  password          String
  imageUrl          String?
  bio               String?
  role              String?      @default("User")
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  preferences      Preferences?
  matchesSent      Match[]      @relation("UserMatchSender")
  matchesReceived  Match[]      @relation("UserMatchReceiver")
  messagesSent     Message[]    @relation("SentMessages")
  messagesReceived Message[]    @relation("ReceivedMessages")

  // NextAuth relations
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
}

model Preferences {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @unique @db.ObjectId
  ethnicity         String?
  religion          String?
  minAge            Int
  maxAge            Int
  sex               String
  genderPreference  String
  occupation        String
  preferredLocation String
  hasPets           Boolean @default(false)
  petType           String?
  minBudget         Int
  maxBudget         Int
  accommodationType String
  sleepPattern      String
  drinking          Boolean @default(false)
  smoking           Boolean @default(false)
  cooking           String

  user User @relation(fields: [userId], references: [id])
}

model Match {
  id        String   @id @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  matchId   String   @db.ObjectId
  createdAt DateTime @default(now())

  sender   User @relation(name: "UserMatchSender", fields: [userId], references: [id])
  receiver User @relation(name: "UserMatchReceiver", fields: [matchId], references: [id])
}

model Message {
  id         String   @id @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  message    String
  timestamp  DateTime @default(now())

  sender   User @relation(name: "SentMessages", fields: [senderId], references: [id])
  receiver User @relation(name: "ReceivedMessages", fields: [receiverId], references: [id])
}

// NextAuth Models
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}